/* istanbul ignore next */'use strict';var /* istanbul ignore next */_constants = require('../../constants');
var /* istanbul ignore next */_DocsActions = require('../DocsActions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_DocsActions);

var /* istanbul ignore next */_reduxThunk = require('redux-thunk'); /* istanbul ignore next */var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
var /* istanbul ignore next */_reduxMockStore = require('redux-mock-store'); /* istanbul ignore next */var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var /* istanbul ignore next */_nock = require('nock'); /* istanbul ignore next */var _nock2 = _interopRequireDefault(_nock);




var /* istanbul ignore next */_reactRouter = require('react-router'); /* istanbul ignore next */var router = _interopRequireWildcard(_reactRouter); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}var middlewares = [/* istanbul ignore next */_reduxThunk2.default];var mockStore = /* istanbul ignore next */(0, _reduxMockStore2.default)(middlewares);

describe('DocsActions', function () {
    afterEach(function () {
        /* istanbul ignore next */_nock2.default.cleanAll();
    });
    it('selectDate', function () {
        var today = new Date();
        /* istanbul ignore next */(0, _nock2.default)( /* istanbul ignore next */_constants.INITVAR.URL_SERVER).
        post('/doc.ctrl/getByDate').
        reply(200, [
        {
            n: 1,
            ddate: today },
        {
            n: 2,
            ddate: today }]);



        var expectedActions = [
        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_SHOW },

        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.SELECT_DATE_DOC,
            payload: {
                docs: [
                {
                    n: 1,
                    ddate: today },
                {
                    n: 2,
                    ddate: today }],


                ddate: today } },


        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_HIDE }];



        var store = mockStore({});

        return store.dispatch(actions.selectDate(today)).
        then(function () {// return of async actions
            expect(store.getActions()).toEqual(expectedActions);
        });
    });

    it('getDoc', function () {
        router.browserHistory = [];
        /*        router.browserHistory = {
                                                history: [],
                                                push: (path)=>{
                                                    history.push(path)
                                                },
                                            };*/
        //        let browserHistoryPushStub = sinon.stub(router.browserHistory, 'push', () => { });
        var today = new Date();
        /* istanbul ignore next */(0, _nock2.default)( /* istanbul ignore next */_constants.INITVAR.URL_SERVER).
        post('/doc.ctrl/getDoc').
        reply(200, {
            n: 1,
            ddate: today });



        var expectedActions = [
        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_SHOW },

        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.SET_DOC,
            payload: {
                n: 1,
                ddate: today } },


        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_HIDE }];



        var store = mockStore({});

        return store.dispatch(actions.getDoc(1)).
        then(function () {// return of async actions
            expect(store.getActions()).toEqual(expectedActions);
            expect(router.browserHistory).toEqual(['/doc']);
        });
    });
});