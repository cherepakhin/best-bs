/* istanbul ignore next */'use strict';var /* istanbul ignore next */_constants = require('../../constants');
var /* istanbul ignore next */_InitVarActions = require('../InitVarActions'); /* istanbul ignore next */var actions = _interopRequireWildcard(_InitVarActions);

var /* istanbul ignore next */_reduxThunk = require('redux-thunk'); /* istanbul ignore next */var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
var /* istanbul ignore next */_reduxMockStore = require('redux-mock-store'); /* istanbul ignore next */var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);
var /* istanbul ignore next */_nock = require('nock'); /* istanbul ignore next */var _nock2 = _interopRequireDefault(_nock);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

var middlewares = [/* istanbul ignore next */_reduxThunk2.default];
var mockStore = /* istanbul ignore next */(0, _reduxMockStore2.default)(middlewares);

describe('InitVar actions', function () {
    afterEach(function () {
        /* istanbul ignore next */_nock2.default.cleanAll();
    });

    it('creates InitVar when fetching initvar has been done', function () {
        /* istanbul ignore next */(0, _nock2.default)( /* istanbul ignore next */_constants.INITVAR.URL_SERVER).
        post('/var.ctrl/initvar').
        reply(200, {
            groups: [],
            typePayments: [],
            discounts: [],
            reports: [],
            company: {} });


        var expectedActions = [
        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_SHOW },

        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.INIT_VAR,
            payload: {
                groups: [],
                typePayments: [],
                discounts: [],
                reports: [],
                company: {} } },


        {
            type: /* istanbul ignore next */_constants.CONST_ACTION.PROGRESS_HIDE }];



        var store = mockStore({});

        return store.dispatch(actions.initVar()).
        then(function () {// return of async actions
            expect(store.getActions()).toEqual(expectedActions);
        });
    });
});